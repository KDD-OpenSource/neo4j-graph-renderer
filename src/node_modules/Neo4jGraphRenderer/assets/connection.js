const getURL = url =>
`${(url || "http://localhost:7474").replace(/\/db\/data.*/,"")}/db/data/transaction/commit`;

const neo4jConnection = connection => {
  return {
    executeQuery: (query, params, callback) => {
      const auth = ((connection.user || "") === "") ? "" : `Basic ${btoa(`${connection.user}:${connection.pass}`)}`;
      if (auth && auth.length) {
        fetch(getURL(connection.url), {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': auth
          },
          body: JSON.stringify({
            statements: [{
              statement: query,
              parameters: params || {},
              resultDataContents: ["row", "graph"]
            }]
          })
        }).then(res => res.json()).then(res => {
          if (res.errors && res.errors.length > 0) {
            callback(res.errors);
          } else {
            const cols = res.results[0].columns;
            const rows = res.results[0].data.map(row => {
              const r = {};
              cols.forEach((col, index) => {
                r[col] = row.row[index];
              });
              return r;
            });
            const nodes = [];
            let relations = [];
            let labels = [];

            res.results[0].data.forEach(row => {
              row.graph.nodes.forEach(n => {
                const found = nodes.filter(m => m.id === n.id).length > 0;
                if (!found) {
                  for (let p in n.properties||{}) {
                    n[p] = n.properties[p];
                    delete n.properties[p];
                  }
                  delete n.properties;
                  nodes.push(n);
                  labels = labels.concat(n.labels.filter(l => labels.indexOf(l) === -1));
                }
              });
              relations = relations.concat(row.graph.relationships.map(r => {
                  return { id: r.id, start:r.startNode, end:r.endNode, type:r.type }
              }));
            });
            callback(null, { table: rows, graph: { nodes: nodes, links: relations }, labels: labels});
          }
        }).catch(err => callback(err));
      }
    }
  };
};

export { neo4jConnection };
